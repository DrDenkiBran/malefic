[config]
default_to_workspace = false
[env]
CARGO_PROFILE_RELEASE_BUILD_OVERRIDE_DEBUG=true
# variables for config
EDITION = "community"
BUILD_MODE = "prebuild"
# variables for modules
MOUDLES_FEATURES = "nano"

[tasks.setup-for-linux-target]
env.CARGO_PROFILE_RELEASE_LTO="true"

[tasks.remap-path]
private = true
script_runner = "@shell"
script = { file = "remap.sh" }

[tasks.malefic-config]
dependencies = ["remap-path"]
description = "Build malefic-config"
command = "cargo"
args = ["build", "--release", "-p", "malefic-config", "--target", "${@}"]

[tasks.config-by-binary]
private = true
description = "Pre-configuration for building malefic/modules"
command = "./malefic_config"
args = ["${EDITION}", "${BUILD_MODE}"]

[tasks.config-by-source]
private = true
description = "Pre-configuration for building malefic/modules"
script_runner = "@shell"
script = '''
if [ ! -f "malefic_config" ]; then
    cargo run --release -p malefic-config ${EDITION} ${BUILD_MODE}
    cp ./target/release/malefic-config malefic_config
fi
'''

[tasks.pre-config]
dependencies = ["remap-path"]
run_task = [
    {name = ["config-by-binary"], condition = {files_exist = ["malefic_config"]}},
    {name = ["config-by-source"]}
]

[tasks.malefic-modules]
condition = { env_set = ["MOUDLES_FEATURES"] }
dependencies = ["pre-config"]
description = "Build malefic modules"
command = "cargo"
args = ["build", "--release", "-p", "malefic-modules", "--features", "${MOUDLES_FEATURES}", "--target", "${@}"]

[tasks.build-malefic]
private = true
dependencies = ["pre-config"]
env_files = ["remap-path.env"]
command = "cargo"
args = ["build", "--release", "-p", "malefic", "--target", "${@}"]

[tasks.malefic]
script_runner = "@duckscript"
script = '''
if contains ${1} "linux"
    cm_run_task setup-for-windows-target
end
cm_run_task build-malefic ${1}
'''

[tasks.clean]
command = "cargo"
args = ["clean"]
